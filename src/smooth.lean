import algebra.ring
import algebra.field
import order
import tactic

universe u

def nilpotent {Œ±} [semigroup Œ±] [has_zero Œ±] (x : Œ±) := x * x = 0
def D (Œ± : Type u) [semigroup Œ±] [has_zero Œ±] := {x : Œ± // nilpotent x}

instance D_has_coe_to_Œ± (Œ± : Type u) [semigroup Œ±] [has_zero Œ±] : has_coe (D Œ±) Œ± :=
  ‚ü®Œª d, d.val‚ü©

instance (Œ± : Type u) [ring Œ±] : has_zero (D Œ±) :=
  ‚ü®‚ü®0, zero_mul 0‚ü©‚ü©

@[simp]
lemma D.zero_coe (Œ± : Type u) [ring Œ±] : ((0:D Œ±) : Œ±) = (0 : Œ±) := rfl

def microaffine {Œ±} [ring Œ±] (f : D Œ± ‚Üí Œ±) (a : Œ±) := ‚àÄ d, f d = f 0 + a * d

@[protect_proj] class SAI_model (Œ± : Type u) extends field Œ±, linear_order Œ± :=
(sqrt : Œ± ‚Üí Œ±) 
(sqrt_prop : ‚àÄ x, 0 < x ‚Üí sqrt x * sqrt x = x)
(kl : (D Œ± ‚Üí Œ±) ‚Üí Œ±)
(kl_prop : ‚àÄ f, microaffine f (kl f))
(kl_unique : ‚àÄ f a, microaffine f a ‚Üí a = kl f) 

def kl {Œ±} [SAI_model Œ±] : (D Œ± ‚Üí Œ±) ‚Üí Œ± := SAI_model.kl
def kl_prop {Œ±} [SAI_model Œ±] (f : D Œ± ‚Üí Œ±) : microaffine f (kl f) := SAI_model.kl_prop f
def kl_unique {Œ±} [SAI_model Œ±] (f : D Œ± ‚Üí Œ±) (a : Œ±) (h : microaffine f a) : a = kl f := SAI_model.kl_unique f a h

lemma non_classical (em : ‚àÄ P, P ‚à® ¬¨ P) (ùïÑ : Type) [h : SAI_model ùïÑ] : ‚àÄ x, nilpotent x ‚Üí x = 0 :=
  begin
    intros x nil_x,
    have x_z : x = 0 ‚à® x ‚â† 0, by apply em,
    cases x_z, {assumption}, exfalso,
    have x_ineq_z : (x < 0 ‚à® x > 0), exact ne.lt_or_lt x_z,
    unfold nilpotent at *,
    cases x_ineq_z,
    all_goals {have xx_gt_0 : x * x > 0, by finish, finish},
  end

lemma microcancellation (Œ±) [M:SAI_model Œ±] (x y : Œ±) ( H : ‚àÄ d : D Œ±, x * d = y * d) : x = y :=
  begin
    let f : D Œ± ‚Üí Œ± := Œª d, x * d,
    have f_x : ‚àÄ d, f d = x * d, by {intro d, refl},
    have f_y : ‚àÄ d, f d = y * d, by {intro d, rw ‚Üê H d},
    transitivity (SAI_model.kl f),
    {apply kl_unique, intro d, simp_rw f_x, simp},
    {symmetry, apply kl_unique, intro d, simp_rw f_y, simp },
  end

def deriv {Œ±} [M:SAI_model Œ±] := Œª (f : Œ± ‚Üí Œ±) (a : Œ±), kl (Œª d, f (a + ‚Üëd))

lemma deriv_prop {Œ±} [M:SAI_model Œ±] (f : Œ± ‚Üí Œ±) (x) : ‚àÄ d : D Œ±, f (x + d) = f x + deriv f x * d :=
  begin
    let g := Œª d : D Œ±, f (a + ‚Üëd)
  end

lemma deriv_unique {Œ±} [M:SAI_model Œ±] (f : Œ± ‚Üí Œ±) (x) (y) ( H : ‚àÄ d : D Œ±, f (x + d) = f x + y * d) : y = deriv f x

lemma deriv_sum {Œ±} [M:SAI_model Œ±] (f g : Œ± ‚Üí Œ±) : deriv (Œª x, f x + g x) = Œª x, deriv f x + deriv g x :=
  begin
    unfold deriv,
    funext,

  end